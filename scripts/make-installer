#/bin/bash

echo
echo '================================================================'
echo 'make-installer'
echo '================================================================'
echo

TIMESTAMP=$(date '+%s')

# create output directory
TARGET_DIR="/home/craigmcc/data-platform"
test -d "$TARGET_DIR" && { mv "$TARGET_DIR" "$TARGET_DIR.$TIMESTAMP"; echo "moved $TARGET_DIR to $TARGET_DIR.$TIMESTAMP"; }
mkdir "$TARGET_DIR" || { echo "fatal error: mkdir failed for $TARGET_DIR"; exit 1; }
echo "created $TARGET_DIR"

# create config directory
mkdir "$TARGET_DIR/config" || { echo "fatal error: mkdir failed for $TARGET_DIR/config"; exit 1; }
echo "created $TARGET_DIR/config"

# copy app config
APP_CONFIG_SRC="/home/craigmcc/dp/dp-java/dp-service/src/main/resources/application.yml"
APP_CONFIG_TARGET="$TARGET_DIR/config/dp.yml"
test -e "$APP_CONFIG_SRC" || { echo "fatal error: APP_CONFIG_SRC $APP_CONFIG_SRC not found"; exit 1; }
cp "$APP_CONFIG_SRC" "$APP_CONFIG_TARGET" || { echo "fatal error: cp failed for APP_CONFIG_SRC $APP_CONFIG_SRC"; exit 1; }
echo "copied APP_CONFIG_SRC $APP_CONFIG_SRC"

# copy log config
LOG_CONFIG_SRC="/home/craigmcc/dp/dp-java/dp-service/src/main/resources/log4j2.xml"
LOG_CONFIG_TARGET="$TARGET_DIR/config/log4j2.xml"
test -e "$LOG_CONFIG_SRC" || { echo "fatal error: LOG_CONFIG_SRC $LOG_CONFIG_SRC not found"; exit 1; }
cp "$LOG_CONFIG_SRC" "$LOG_CONFIG_TARGET" || { echo "fatal error: cp failed for LOG_CONFIG_SRC $LOG_CONFIG_SRC"; exit 1; }
echo "copied LOG_CONFIG_SRC $LOG_CONFIG_SRC"

# create bin directory
mkdir "$TARGET_DIR/bin" || { echo "fatal error: mkdir failed for $TARGET_DIR/bin"; exit 1; }
echo "created $TARGET_DIR/bin"

# copy dp-support/bin
BIN_SRC="/home/craigmcc/dp/dp-support/bin"
cp "$BIN_SRC"/* "$TARGET_DIR/bin" || { echo "fatal error: cp failed for BIN_SRC $BIN_SRC"; exit 1; }
echo "copied BIN_SRC $BIN_SRC"

# create lib directory
mkdir "$TARGET_DIR/lib" || { echo "fatal error: mkdir failed for $TARGET_DIR/lib"; exit 1; }
echo "created $TARGET_DIR/lib"

# generate dp-service jar
pushd "/home/craigmcc/dp/dp-java/dp-service" || { echo "fatal error: pushd failed for /home/craigmcc/dp/dp-java/dp-service"; exit 1; }
MVN_CMD="mvn package"
eval "$MVN_CMD" || { echo "fatal error: MVN_CMD $MVN_CMD failed"; exit 1; }
echo "MVN_CMD: $MVN_CMD"
popd || { echo "fatal error: popd failed"; exit 1; }

# copy dp-service jar
JAR_SRC="/home/craigmcc/dp/dp-java/dp-service/target/dp-service-1.3.0-shaded.jar"
JAR_TARGET="$TARGET_DIR/lib/dp-service.jar"
test -e "$JAR_SRC" || { echo "fatal error: JAR_SRC $JAR_SRC not found"; exit 1; }
cp "$JAR_SRC" "$JAR_TARGET" || { echo "fatal error: cp failed for JAR_SRC $JAR_SRC"; exit 1; }
echo "copied JAR_SRC $JAR_SRC"

# copy README.env
README_SRC="/home/craigmcc/dp/data-platform/README.env"
README_TARGET="$TARGET_DIR/README.env"
test -e "$README_SRC" || { echo "fatal error: README_SRC $README_SRC not found"; exit 1; }
cp "$README_SRC" "$README_TARGET" || { echo "fatal error: cp failed for README_SRC $README_SRC"; exit 1; }
echo "copied README_SRC $README_SRC"

# create templates directory
mkdir "$TARGET_DIR/templates" || { echo "fatal error: mkdir failed for $TARGET_DIR/templates"; exit 1; }
echo "created $TARGET_DIR/templates"

# copy templates
TEMPLATE_SRC="/home/craigmcc/dp/data-platform/templates"
cp "$TEMPLATE_SRC"/* "$TARGET_DIR/templates" || { echo "fatal error: cp failed for TEMPLATE_SRC $TEMPLATE_SRC"; exit 1; }
echo "copied TEMPLATE_SRC $TEMPLATE_SRC"

# create proto directory
mkdir "$TARGET_DIR/proto" || { echo "fatal error: mkdir failed for $TARGET_DIR/proto"; exit 1; }
echo "created $TARGET_DIR/proto"

# copy proto files
PROTO_SRC="/home/craigmcc/dp/dp-java/dp-grpc/src/main/proto"
cp "$PROTO_SRC"/* "$TARGET_DIR/proto" || { echo "fatal error: cp failed for PROTO_SRC $PROTO_SRC"; exit 1; }
echo "copied PROTO_SRC $PROTO_SRC"

# run protoc to generate javascript stubs from proto files
PROTOC_CMD="~/bin/protoc -I=/home/craigmcc/dp/dp-java/dp-grpc/src/main/proto --js_out=import_style=commonjs,binary:/home/craigmcc/dp/protoc-output common.proto query.proto annotation.proto && protoc -I=/home/craigmcc/dp/dp-java/dp-grpc/src/main/proto --grpc-web_out=import_style=commonjs,mode=grpcwebtext:/home/craigmcc/dp/protoc-output common.proto query.proto annotation.proto"
echo "PROTOC_CMD: $PROTOC_CMD"
eval "$PROTOC_CMD" || { echo "fatal error: PROTOC_CMD $PROTOC_CMD failed"; exit 1; }

# create installer directory for protoc-generated javascript stubs
mkdir "$TARGET_DIR/javascript" || { echo "fatal error: mkdir failed for $TARGET_DIR/javascript"; exit 1; }

# copy protoc-generated javascript stubs to installer directory
STUB_SRC="/home/craigmcc/dp/protoc-output"
cp "$STUB_SRC"/* "$TARGET_DIR/javascript" || { echo "fatal error: cp failed for STUB_SRC $STUB_SRC"; exit 1; }
echo "copied STUB_SRC $STUB_SRC"

# create var directory
mkdir "$TARGET_DIR/var" || { echo "fatal error: mkdir failed for $TARGET_DIR/var"; exit 1; }
echo "created $TARGET_DIR/var"

# create lock directory
mkdir "$TARGET_DIR/var/lock" || { echo "fatal error: mkdir failed for $TARGET_DIR/var/lock"; exit 1; }
echo "created $TARGET_DIR/var/lock"

# create log directory
mkdir "$TARGET_DIR/var/log" || { echo "fatal error: mkdir failed for $TARGET_DIR/var/log"; exit 1; }
echo "created $TARGET_DIR/var/log"

# change to root dir so tar file contains relative paths
cd

# create tarball of installer
DP_DIR="data-platform"
test -d "$TARGET_DIR" || { echo "fatal error: DP_DIR $DP_DIR does not exist"; exit 1; }
TAR_FILE="/home/craigmcc/data-platform-installer.tar"
tar cvf "$TAR_FILE" "$DP_DIR"/*  || { echo "fatal error: tar faile to create TAR_FILE $TAR_FILE"; exit 1; }
echo "created TAR_FILE $TAR_FILE"

# gzip tarball
gzip "$TAR_FILE"
echo "created tarball $TAR_FILE.gz"

# move target directory to add timestamp suffix
mv "$TARGET_DIR" "$TARGET_DIR.$TIMESTAMP" ||  { echo "failed to mv $TARGET_DIR to $TARGET_DIR.$TIMESTAMP"; exit 1; }
echo "moved $TARGET_DIR to $TARGET_DIR.$TIMESTAMP"
